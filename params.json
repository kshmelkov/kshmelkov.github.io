{"name":"Konstantin Shmelkov's blog","tagline":"My online life","body":"# ArchLinux installation on LUKS-encrypted Btrfs partition booting by UEFI\r\n\r\nRecently I have upgraded my system to Lenovo ThinkPad X1 Carbon Gen2 laptop. I\r\ndecided to install quiet complicated setup: ArchLinux on Btrfs with full drive\r\nencryption (LUKS) and UEFI boot from USB key with /boot and LUKS header.\r\n\r\nIt allows to have deniable encryption (LUKS header on USB key, laptop's\r\nSSD is entirely encrypted), two-factor authorization (you can't load without\r\nLUKS header which is encrypted with your password). UEFI boot is just for fun.\r\nI highly recommend to read all [ArchWiki pages](https://wiki.archlinux.org/index.php/Dm-crypt) about full disk encryption to\r\nunderstand different stages of installation.\r\n\r\nI have choosed Btrfs because it is a modern, fast filesystem and has some cool\r\nfeatures like snapshots and dynamic subvolumes. It can also manage its\r\npartitions (subvolumes) without partition table. As we put /boot on USB key,\r\nwe can give entire SSD for Btrfs (no swap support though). Another important\r\nquestion is TRIM/discard support. In this setting it is totally possible, but\r\nit is considered [insecure](http://asalor.blogspot.fr/2011/08/trim-dm-crypt-problems.html). It is up to you to decide.\r\n\r\nI have read lots of wiki pages and forums to figure out the installation\r\nprocess. So I want to explain it step-by-step for other people.\r\n\r\nAs USB key I have chosed [Integral Fusion USB 3.0](http://www.integralmemory.com/product/fusion-usb-3-superspeed-small-metal-flash-drive). It has rather good\r\nread speed, but awful write speed (not important for me). It is also very\r\nsmall and has no cap.\r\n\r\n**DISCLAIMER**: You do everything described on your own risk. By the way, you will *destroy* all the data present on you laptop. I hope you understand it. If it isn't clear, please re-read ArchWiki.\r\n\r\n---\r\nFirst of all, don't forget to update your BIOS version. It can be done from\r\nWindows slightly easier. You need another USB key to write down ArchLinux\r\ninstallation image. Then go to BIOS and set the boot mode as UEFI first. Boot\r\nfrom this USB in UEFI mode. On X1 Carbon you should press F12 after powering\r\non to choose USB device to boot from.\r\n\r\nIf you have a laptop with HiDPI you will be surprised with such a small font.\r\nFix it with command:\r\n\r\n    setfont sun12x22\r\n\r\nIt becomes a bit better. Actually it is the largest console font available.\r\nThen check that you are in UEFI mode:\r\n\r\n    efivar -l\r\n\r\nIf you get an error, go again to BIOS. Now you need to connect to the\r\nInternet. I connect via WiFi so:\r\n\r\n    wifi-menu\r\n\r\nDouble check that you have an Internet access. First of all, wipe the disk. I\r\namn't sure if it really necessary with the SSD, but it is widely recommended\r\n(especially for deniable security). To fill a disk with pseudo-random data you\r\ncan use `/dev/urandom` (it is too slow) or open the whole disk as an encrypted\r\nvolume and write zeros inside. The sequence of zeros will be encrypted in very\r\nmessy data. If you are really serious about deniable security, choose the same\r\ncipher that you want to use later. I need to put an usual disclaimer that next\r\nactions are irreversible, you destroy all data on `/dev/sdX` (it is your SSD by\r\nthe way).\r\n\r\n    cryptsetup open --type plain /dev/sdX ssd\r\n\r\nEnter anything as password. \r\n\r\n    ddrescue -f /dev/zero /dev/mapper/ssd\r\n\r\nIt'll take a while. Hopefully SSD is fast, for me it was a bit less than 10 min.\r\n\r\n    cryptsetup close ssd\r\n\r\nNow initialization of bootable USB key. I will denote it as `/dev/sdY`.\r\n\r\n    gdisk /dev/sdY\r\n\r\nCreate new GPT partition table and small partition for /boot (about 300-500Mb).\r\nDefine its type as EF00 (in gdisk EFI System Partition). Exit from gdisk and\r\nformat it in FAT32:\r\n\r\n    mkfs.fat -F32 /dev/sdY1\r\n    mkdir /efi\r\n    mount /dev/sdY1 /efi\r\n    cd /efi\r\n\r\nNext create an empty file for LUKS header (you might modify header size if you choose other encryption settings):\r\n\r\n    truncate -s 2M header.img\r\n\r\nCreate device-mapping encrypted device with this header. Before choosing a\r\ncipher, you can test the speed of your system with \r\n\r\n    cryptsetup benchmark\r\n\r\nIf you choose XTS mode, remember that effective key size is divided by two.\r\nLet's create an encrypted device:\r\n\r\n    cryptsetup --cipher=aes-xts-plain64 --hash=sha512 --verify-passphrase --key-size=256 luksFormat /dev/sdX --header header.img\r\n    cryptsetup open --header header.img --type luks /dev/sdX root\r\n\r\nNext create the filesystem and mount it. If you decide to enable TRIM, add\r\ndiscard to mount options:\r\n\r\n    mkfs.btrfs -L \"ARCHROOT\" /dev/mapper/root\r\n    mount -o defaults,noatime,ssd /dev/mapper/root /mnt/btrfs-root\r\n    btrfs subvolume create /mnt/btrfs-root/__active\r\n    btrfs subvolume create /mnt/btrfs-root/__active/home\r\n    btrfs subvolume create /mnt/btrfs-root/__active/var\r\n\r\nYou can add some other subvolumes if you want.\r\n\r\n    mount -o subvol=__active /dev/mapper/root /mnt\r\n\r\nChange default permissions (700):\r\n    chmod 755 /mnt/btrfs-root/__active\r\n    chmod 755 /mnt/btrfs-root/__active/home\r\n    chmod 755 /mnt/btrfs-root/__active/var\r\n\r\nBefore chrooting remount USB key:\r\n\r\n    umount /efi\r\n    mkdir /mnt/boot\r\n    mount /dev/sdY1 /mnt/boot\r\n\r\nNow you can proceed with ordinary install, you can\r\nconsult [ArchWiki installation guide](https://wiki.archlinux.org/index.php/installation_guide):\r\n\r\n    nano /etc/pacman.d/mirrorlist\r\n    pacstrap /mnt base base-devel wpa_supplicant gummiboot\r\n    genfstab -U -p /mnt >> /mnt/etc/fstab\r\n\r\nLater you can add `noauto` option in `fstab` for `/boot` partition. Nevertheless, it\r\nmust be mounted to update the kernel. Now we are ready to go inside!\r\n\r\n    arch-chroot /mnt /bin/bash\r\n    nano /etc/locale.gen\r\n\r\nUncomment your favorite locale, for example, en_US.UTF-8 UTF-8.\r\n\r\n    locale-gen\r\n    echo LANG=en_CA.UTF-8 > /etc/locale.conf\r\n    export LANG=en_US.UTF-8\r\n\r\nChoose your timezone\r\n\r\n    ls /usr/share/zoneinfo/\r\n    ln -s /usr/share/zoneinfo/<continent>/<city> /etc/localtime\r\n    hwclock --systohc --utc\r\n\r\nIn the next file you should enter \r\n\r\n    FONT=sun12x22\r\n    KEYMAP=us\r\n\r\nor another keymap in which you have password:\r\n\r\n    nano /etc/vconsole.conf\r\n\r\nStore the desired network name:\r\n\r\n    nano /etc/hostname\r\n\r\nYou could make a `netctl` profile for the first boot.\r\nThen set root password:\r\n\r\n    passwd\r\n\r\nNow it is an important moment. You need to set up \r\ninitcpio hooks to successfully unlock the disk.\r\nUnfortunately, default encrypt hook doesn't yet support \r\nremote LUKS header, so you need to modify it.\r\n\r\n    nano /etc/mkinitcpio.conf\r\n\r\nRemove `fsck` hook, insert \r\n\r\n    keyboard keymap consolefont encrypt2 \r\n\r\njust before `filesystems` hook (keyboard exists normally, but\r\nyou should move it before `encrypt2`). Add also\r\n\r\n    MODULES=\"loop\"\r\n    FILES=\"/boot/header.img\"\r\n\r\nI added also in MODULES i915 to enable early KMS on my laptop.\r\nCreate encrypt2 hook as described in [ArchWiki](https://wiki.archlinux.org/index.php/Dm-crypt/Specialties#Encrypted_system_using_a_remote_LUKS_header)\r\n\r\n    cp /lib/initcpio/hooks/encrypt{,2}\r\n    cp /usr/lib/initcpio/install/encrypt{,2}\r\n    nano /lib/initcpio/hooks/encrypt2\r\n\r\nNow you are ready to regenerate initramfs image:\r\n\r\n    mkinitcpio -p linux\r\n\r\nIt is time to install bootloader. I decided to use gummiboot\r\nbecause it is purely UEFI, simple, text-based. You could use GRUB2\r\nor rEFInd:\r\n\r\n    gummiboot install\r\n\r\nInsert following files. If you don't want menu,\r\ninsert timeout 0. In this case you can summon it if you\r\npress space while loading.\r\n## /boot/loader/loader.conf\r\n   default  arch\r\n   timeout  3\r\n\r\n## /boot/loader/entries/arch.conf\r\n   title Arch Linux\r\n   linux /vmlinuz-linux\r\n   initrd /initramfs-linux.img\r\n   options cryptdevice=/dev/sdX:root:header root=/dev/mapper/root rootflags=subvol=__active rw\r\nAdd `,allow-discards` after header option if you decided to go with TRIM/discard support. \r\n\r\nHope that it works. It is time to try!\r\n\r\n    exit\r\n    umount /mnt/boot\r\n    umount /mnt\r\n    cryptsetup close root\r\n    reboot","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}